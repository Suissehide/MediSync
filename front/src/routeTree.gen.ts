/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PatientImport } from './routes/patient'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsSoignantImport } from './routes/settings/soignant'
import { Route as SettingsPlanningImport } from './routes/settings/planning'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const PatientRoute = PatientImport.update({
  id: '/patient',
  path: '/patient',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSoignantRoute = SettingsSoignantImport.update({
  id: '/settings/soignant',
  path: '/settings/soignant',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPlanningRoute = SettingsPlanningImport.update({
  id: '/settings/planning',
  path: '/settings/planning',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/patient': {
      id: '/patient'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/settings/planning': {
      id: '/settings/planning'
      path: '/settings/planning'
      fullPath: '/settings/planning'
      preLoaderRoute: typeof SettingsPlanningImport
      parentRoute: typeof rootRoute
    }
    '/settings/soignant': {
      id: '/settings/soignant'
      path: '/settings/soignant'
      fullPath: '/settings/soignant'
      preLoaderRoute: typeof SettingsSoignantImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/patient': typeof PatientRoute
  '/auth/login': typeof AuthLoginRoute
  '/settings/planning': typeof SettingsPlanningRoute
  '/settings/soignant': typeof SettingsSoignantRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/patient': typeof PatientRoute
  '/auth/login': typeof AuthLoginRoute
  '/settings/planning': typeof SettingsPlanningRoute
  '/settings/soignant': typeof SettingsSoignantRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/patient': typeof PatientRoute
  '/auth/login': typeof AuthLoginRoute
  '/settings/planning': typeof SettingsPlanningRoute
  '/settings/soignant': typeof SettingsSoignantRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/patient'
    | '/auth/login'
    | '/settings/planning'
    | '/settings/soignant'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/patient'
    | '/auth/login'
    | '/settings/planning'
    | '/settings/soignant'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/patient'
    | '/auth/login'
    | '/settings/planning'
    | '/settings/soignant'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  PatientRoute: typeof PatientRoute
  AuthLoginRoute: typeof AuthLoginRoute
  SettingsPlanningRoute: typeof SettingsPlanningRoute
  SettingsSoignantRoute: typeof SettingsSoignantRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  PatientRoute: PatientRoute,
  AuthLoginRoute: AuthLoginRoute,
  SettingsPlanningRoute: SettingsPlanningRoute,
  SettingsSoignantRoute: SettingsSoignantRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/patient",
        "/auth/login",
        "/settings/planning",
        "/settings/soignant"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/patient": {
      "filePath": "patient.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/settings/planning": {
      "filePath": "settings/planning.tsx"
    },
    "/settings/soignant": {
      "filePath": "settings/soignant.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
